name: 'Build and Push Python Package'
description: 'Builds and pushes python package to nexus'

inputs:
  package_name:
    description: Name of the python package to build
    required: true
  nexus_repository:
    description: Repository name in nexus where the package will be pushed
    required: true
  nexus_username:
    description: Username for nexus
    required: true
  nexus_password:
    description: Password for nexus
    required: true

runs:
  using: "composite"

  steps:

    - 
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - 
      name: Checkout main branch
      uses: actions/checkout@v3
      with:
        ref: main
        path: main

    - 
      name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - 
      name: Install and configure Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.2.2
        installer-parallel: false

    - 
      name: Install
      shell: bash
      working-directory: ${{ inputs.package_name }}
      run: poetry install

    - uses: actions/setup-node@v3
      with:
        node-version: 'latest'

    - 
      name: Determine version part
      if: github.event_name == 'pull_request'
      id: version_part
      shell: bash
      run: |
        COMMIT_MESSAGE=$(git log --format=%B -n 1 ${{ github.event.pull_request.head.sha }})
        VERSION_PART=$(echo $COMMIT_MESSAGE | cut -d' ' -f1)
        echo "version_part=${VERSION_PART}" >> $GITHUB_OUTPUT

    - 
      name: Get main branch version
      if: github.event_name == 'pull_request'
      id: main_version
      shell: bash
      run: |
        MAIN_VERSION=$(awk -F ' = ' '/^version = /{ gsub(/"/, "", $2); print $2; exit }' main/${{ inputs.package_name }}/pyproject.toml)
        echo "main_version=${MAIN_VERSION}" >> $GITHUB_OUTPUT

    - 
      name: Get pull request version
      if: github.event_name == 'pull_request'
      id: pull_request_version
      shell: bash
      working-directory: ${{ inputs.package_name }}
      run: |
        PULL_REQUEST_VERSION=$(awk -F ' = ' '/^version = /{ gsub(/"/, "", $2); print $2; exit }' pyproject.toml)
        echo "pull_request_version=${PULL_REQUEST_VERSION}" >> $GITHUB_OUTPUT

    - 
      name: Compare versions
      if: github.event_name == 'pull_request'
      id: compare_versions
      shell: bash
      run: |
        MAIN_VERSION=${{ steps.main_version.outputs.main_version }}
        PULL_REQUEST_VERSION=${{ steps.pull_request_version.outputs.pull_request_version }}

        if [[ "$MAIN_VERSION" == "$PULL_REQUEST_VERSION" ]]; then
          echo "versions_match=true" >> $GITHUB_OUTPUT
          echo "Bumping version!"
        else
          echo "versions_match=false" >> $GITHUB_OUTPUT
          echo "Version already bumped."
        fi
    
    - 
      name: Bump version
      if: ${{ github.event_name == 'pull_request' && steps.compare_versions.outputs.versions_match == 'true' }}
      shell: bash
      working-directory: ${{ inputs.package_name }}
      run: |
        VERSION_PART=$(echo $COMMIT_MESSAGE | cut -d':' -f1)
        if [[ "$VERSION_PART" == "patch" ]]; then
          poetry version patch
        elif [[ "$VERSION_PART" == "minor" ]]; then
          poetry version minor
        elif [[ "$VERSION_PART" == "major" ]]; then
          poetry version major
        else
          echo "Invalid version part specified in the commit message. Add patch:, minor: or major: to beginning of the commit message!"
          exit 1
        fi

    - 
      uses: stefanzweifel/git-auto-commit-action@v4
      if: ${{ github.event_name == 'pull_request' && steps.compare_versions.outputs.versions_match == 'true' }}
      with:
        commit_message: Bump python version
        commit_options: '--no-verify --signoff'
        file_pattern: ${{ inputs.package_name }}/pyproject.toml

    - 
      name: Poetry upload to Nexus
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: bash
      working-directory: ${{ inputs.package_name }}
      run: |
        poetry config repositories.nexus-local https://nexus.zageno.com/repository/${{ inputs.nexus_repository }}/
        poetry publish --build --repository nexus-local --username ${{ inputs.nexus_username }} --password ${{ inputs.nexus_password }}
